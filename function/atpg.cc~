/*
 * =====================================================================================
 *
 *       Filename:  atpg.cc
 *
 *    Description:  
 *
 *        License:  
 *
 *        Version:  1.0
 *        Created:  5/13/2014
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Yi WU <eejessie@sjtu.edu.cn>
 *         
 * =====================================================================================
 */

// #####   HEADER FILE INCLUDES   ################################################### 

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <set>
#include <vector>
#include <map>
#include <algorithm>
#include <math.h>
#include <cassert>


#include "lib/forward_implication.cc"   // Contains the forward implication functions.
#include "lib/radix_convert.cc"         // Contains functions to convert decimal number to base N.
#include "lib/string_convert.cc"


#include "class/CircuitNode.h"         // This class stores information about each node in the circuit.
#include "class/CircuitLine.h"         // This class stores the line number and stuck at faults. Both faults for unique line.
#include "class/FaultList.h"           // This class stores the line number and stuck at fault. Only one fault, for analysis.
#include "class/TestList.h"            // This class contains the line number, fault and test vector with a flag to indicate if test is possible.


// This file contains the tables which are looked up for determinig the output.

#ifndef LOGIC_TABLES_H_
#include "include/logic_tables.h"
#endif


// Global constant definitions.

#ifndef GLOBAL_DEFINES_H_
#include "include/global_defines.h"
#endif

using namespace std;
using namespace nameSpace_ATPG;


extern ofstream logFile;
extern vector <string> masterInputVector;
extern vector <string> masterTestVector;



/*
 * ============================================================================
 * Functions to Perform Logical Operations on the Circuit.
 * ============================================================================
 */

/* 3
 * ===  FUNCTION  ======================================================================
 *         Name:  SetLineLevel
 *  Description:  This function divides the circuit in logical levels.
 *                There is no feedback in a combinational circuit so we can go from 
 *                level 0 to level MAX and find the proper input to output paths.
 * =====================================================================================
 */
void SetLineLevel_helper (CircuitNode &node, map <int, CircuitNode> &tempNodeList)
{
	set<int>::iterator itrs;
	map<int, CircuitNode>::iterator itrm;
	if(!node.listFanOut.empty())
		for(itrs = node.listFanOut.begin(); itrs != node.listFanOut.end(); itrs++)
		{
			itrm = tempNodeList.find(*itrs);
			if(itrm->second.lineLevel <= node.lineLevel)
				itrm->second.lineLevel = node.lineLevel + 1;
	
			SetLineLevel_helper(itrm->second, tempNodeList);
		}

}

int SetLineLevel (map <int, CircuitNode> &masterNodeList) {

    #ifdef DEBUG
        WRITE << "================================================================================" << endl;
        WRITE << "===============               In --> SetLineLevel                ===============" << endl;
        WRITE << "================================================================================" << endl << endl;
    #endif

	map<int, CircuitNode>::iterator itrm;

	int i, outputLevel=0;
    for (itrm = masterNodeList.begin(); itrm != masterNodeList.end(); itrm++) {
        if (itrm->second.numberFanIn == 0)
            itrm->second.lineLevel = 0;                    // Level of primary inputs is 0.
        else
            itrm->second.lineLevel = -1;                   // Level of all other nodes is -1, placeholder.
    }
	
	vector<CircuitNode> inputNodeList;

    for (itrm = masterNodeList.begin(); itrm != masterNodeList.end(); itrm++)
	{
		if(itrm->second.nodeType == 1)   //PI
			inputNodeList.push_back(itrm->second);
	}

	for (int i=0; i < inputNodeList.size(); i++)
	{
		//cout << "input "<<i<<" is "<<inputNodeList[i].lineNumber<<endl;
		SetLineLevel_helper(inputNodeList[i], masterNodeList);
	}
	for (itrm = masterNodeList.begin(); itrm != masterNodeList.end(); itrm++)
	{
		if(itrm->second.gateType == 9 || itrm->second.gateType == 10)
			SetLineLevel_helper(itrm->second, masterNodeList);
	}

	//masterNodeList = tempNodeList ;


	for(itrm = masterNodeList.begin(); itrm != masterNodeList.end(); itrm++)
    {
		if (itrm->second.lineLevel > outputLevel)
			outputLevel = itrm->second.lineLevel;
	}
	

   /* #ifdef DEBUG
		for(i=0; i<masterNodeList.size(); i++)
        {
			if (masterNodeList[i].lineLevel > outputLevel)
				outputLevel = masterNodeList[i].lineLevel;
			WRITE << "Line Number = " << masterNodeList[i].lineNumber << ". Level = " << masterNodeList[i].lineLevel << "." << endl;
		}
    #endif

    #ifdef DEBUG
        WRITE << "--------------------------------------------------------------------------------" << endl << endl;
    #endif*/
	
	return outputLevel;

}

/* 4
 * ===  FUNCTION  ======================================================================
 *         Name:  CreateFaultObjects
 *  Description:  This function generates one object of the CircuitLine class for every
 *                unique line in the circuit. So, after going through this function, we 
 *                have a list of objects for each line in the circuit. Every line may 
 *                have a stuck at 0 or a stuck at 1 fault so values are set to true for 
 *                both.
 *
 *                A map is used here with the line number as the key. Duplicate elements 
 *                would be removed automatically by the map.
 * =====================================================================================
 */
void CreateFaultObjects (map <int, CircuitLine> &masterLineList, vector <CircuitNode> &masterNodeList) {

    #ifdef DEBUG
        WRITE << "================================================================================" << endl;
        WRITE << "===============            In --> CreateFaultObjects             ===============" << endl;
        WRITE << "================================================================================" << endl << endl;
    #endif

    set <int>::iterator itr;

    for (int i = 0; i < masterNodeList.size(); i++) {

		if (masterNodeList[i].internal == true)
			continue;
		if (masterNodeList[i].circuitIndex != 1 )
			continue;
		
        // Create an object for every node.
        CircuitLine *thisLine;
        thisLine = new CircuitLine(masterNodeList[i].lineNumber);
        masterLineList.insert(pair<int, CircuitLine>(masterNodeList[i].lineNumber, *thisLine));
        delete thisLine;

        // Create an object for every fan in of the node.
     /*   for (itr = masterNodeList[i].listFanIn.begin(); itr != masterNodeList[i].listFanIn.end(); itr++) {
		//	if(*itr >= bound) break;
            CircuitLine *thisLine;
            thisLine = new CircuitLine(*itr);
            masterLineList.insert(pair<int, CircuitLine>(*itr, *thisLine));
            delete thisLine;
        }

        // Create an object for every fan out of the node.
        for (itr = masterNodeList[i].listFanOut.begin(); itr != masterNodeList[i].listFanOut.end(); itr++) {
		//	if(*itr >= bound) break;
            CircuitLine *thisLine;
            thisLine = new CircuitLine(*itr);
            masterLineList.insert(pair<int, CircuitLine>(*itr, *thisLine));
            delete thisLine;
        }*/

    }

    #ifdef DEBUG
        for (map<int, CircuitLine>::iterator itr = masterLineList.begin(); itr != masterLineList.end(); itr++) {
            WRITE << "------------------------------------------------------------" << endl;
            WRITE << "\tThe map contains following values" << endl;
            WRITE << "------------------------------------------------------------" << endl;
            WRITE << "The key is " << (*itr).first << endl;
            WRITE << "The Element is " << (*itr).second.lineNumber << endl;
            WRITE << "The StuckAt_0 fault is " << (*itr).second.isStuckAt_0 << endl;
            WRITE << "The StuckAt_1 fault is " << (*itr).second.isStuckAt_1 << endl;
            WRITE << "------------------------------------------------------------" << endl;
            WRITE << endl << endl;
        }
    #endif


}

/* 5
 * ===  FUNCTION  ======================================================================
 *         Name:  CollapseFaults
 *  Description:  This function takes the list of lines in the circuit and then 
 *                collapses the faults going from output to input.
 *
 *                Fault collapse for XOR, XNOR and Branches is not yet implemented.
 * =====================================================================================
 */
void CollapseFaults (map <int, CircuitLine> &masterLineList, vector <CircuitNode> &masterNodeList) {

    #ifdef DEBUG
        WRITE << "================================================================================" << endl;
        WRITE << "===============               In --> CollapseFaults              ===============" << endl;
        WRITE << "================================================================================" << endl << endl;
    #endif

	cout << "masterNodeList.size = "<<masterNodeList.size()<<endl;

    map <int, CircuitLine>::iterator itrMap;
    set <int>::iterator itrSet;
    itrMap = masterLineList.end();
    itrMap--;

    int lastOutputLineNumber = (*itrMap).second.lineNumber;         // Line number of the last output.
    int lastOutputLineLevel = masterNodeList.back().lineLevel;      // Level of the last output.

    #ifdef DEBUG
        WRITE << "Line number of last output = " << lastOutputLineNumber << endl;
        WRITE << "Level of last output = " << lastOutputLineLevel << endl;
    #endif

    // From the highest level (last output) to zero.
    //      -- For all the nodes.
    //          -- If the current node has the highest level.
    //              -- Collapse faults.
    //              -- Reduce highest level by 1.
    //      -- Next iteration of the loop.
    //
    // In the collapse faults procedure, the fault can collapse
    // to any one of the 2/3 inputs.
    // In this code, the fault always collapses to the input with
    // the smallest line number.
    //
    // Generic structure of the fault collapse is -
    //      -- Remove both faults from output.
    //      -- Reduce one of them to single fault at one of the inputs.
    //      -- Second fault stays on all inputs.
    //
    // XOR, XNOR and Branches are not considered here.

    for (int i = lastOutputLineLevel; i > 0; i--) {
        for (int j = 0; j < masterNodeList.size(); j++) {
            if (masterNodeList[j].lineLevel == i) {
                switch (masterNodeList[j].gateType) {
                    case G_PI:
                        break;
                    case G_BRNCH:
                        break;
                    case G_XOR:
                        break;
                    case G_OR:
                    case G_NOR:
                        for (itrSet = masterNodeList[j].listFanOut.begin(); itrSet != masterNodeList[j].listFanOut.end(); itrSet++) {
                            masterLineList.at(*itrSet).isStuckAt_0 = false;
                            masterLineList.at(*itrSet).isStuckAt_1 = false;
                        }
                        for (itrSet = masterNodeList[j].listFanIn.begin(); itrSet != masterNodeList[j].listFanIn.end(); itrSet++) {
                            if (itrSet != masterNodeList[j].listFanIn.begin())
                                masterLineList.at(*itrSet).isStuckAt_1 = false;

                        }
                        break;
                    case G_NOT:
                        for (itrSet = masterNodeList[j].listFanOut.begin(); itrSet != masterNodeList[j].listFanOut.end(); itrSet++) {
                            masterLineList.at(*itrSet).isStuckAt_0 = false;
                            masterLineList.at(*itrSet).isStuckAt_1 = false;
                        }
                        break;
                    case G_NAND:
                    case G_AND:
                        for (itrSet = masterNodeList[j].listFanOut.begin(); itrSet != masterNodeList[j].listFanOut.end(); itrSet++) {
                            masterLineList.at(*itrSet).isStuckAt_0 = false;
                            masterLineList.at(*itrSet).isStuckAt_1 = false;
                        }
                        for (itrSet = masterNodeList[j].listFanIn.begin(); itrSet != masterNodeList[j].listFanIn.end(); itrSet++) {
                            if (itrSet != masterNodeList[j].listFanIn.begin())
                                masterLineList.at(*itrSet).isStuckAt_0 = false;

                        }
                        break;
                    default:
                        cerr << "Unknown gate type encountered. The possible gate type values are from 0-7." << endl;
                        cerr << "Current gate type is " << masterNodeList[j].gateType << endl;
                        exit (0);
                        break;
                }
            }
        }
    }


    #ifdef DEBUG
        for (map<int, CircuitLine>::iterator itr = masterLineList.begin(); itr != masterLineList.end(); itr++) {
            WRITE << "------------------------------------------------------------" << endl;
            WRITE << "\tAfter Fault Collapse, the Map contains" << endl;
            WRITE << "------------------------------------------------------------" << endl;
            WRITE << "The key is " << (*itr).first << endl;
            WRITE << "The Element is " << (*itr).second.lineNumber << endl;
            WRITE << "The StuckAt_0 fault is " << (*itr).second.isStuckAt_0 << endl;
            WRITE << "The StuckAt_1 fault is " << (*itr).second.isStuckAt_1 << endl;
            WRITE << "------------------------------------------------------------" << endl;
            WRITE << endl << endl;
        }
    #endif

}

/* 6
 * ===  FUNCTION  ======================================================================
 *         Name:  CreateFaultList
 *  Description:  Once the faults have been collapsed, this function generates a list 
 *                of all possible faults and the line numbers associated with them. When 
 *                running ATPG, we have to obtain a test for every fault in this list.
 * =====================================================================================
 */
void CreateFaultList (map <int, CircuitLine> &masterLineList, vector <FaultList> &inFaultList) {

    #ifdef DEBUG
        WRITE << "================================================================================" << endl;
        WRITE << "===============               In --> CreateFaultList               ===============" << endl;
        WRITE << "================================================================================" << endl << endl;
    #endif

    for (map<int, CircuitLine>::iterator itr = masterLineList.begin(); itr != masterLineList.end(); itr++) {
        if ((*itr).second.isStuckAt_0) {
            FaultList *thisFault;
            thisFault = new FaultList ((*itr).first, false);
            inFaultList.push_back(*thisFault);
            delete thisFault;
        }
        if ((*itr).second.isStuckAt_1) {
            FaultList *thisFault;
            thisFault = new FaultList ((*itr).first, true);
            inFaultList.push_back(*thisFault);
            delete thisFault;
        }
    }

    #ifdef DEBUG
        WRITE << endl;
        WRITE << "Master Fault List Contains" << endl;
        WRITE << "------------------------------------------------------------" << endl;
        for (int i = 0; i < inFaultList.size(); i++) {
            WRITE << "Line Number = " << inFaultList[i].lineNumber << endl;
            WRITE << "Fault Value = " << inFaultList[i].stuckAtValue << endl;
            WRITE << endl;
        }
        WRITE << endl;
    #endif

}



/* 7
 * ===  FUNCTION  ======================================================================
 *         Name:  SimpleLogicSimulation
 *  Description:  
 * =====================================================================================
 */
void SimpleLogicSimulation (map <int, CircuitNode> &masterNodeList, int totalInputs, string inVector, int outputLevel) {


	#ifdef DEBUG
        WRITE << "================================================================================" << endl;
        WRITE << "===============           In --> SimpleLogicSimulation           ===============" << endl;
        WRITE << "================================================================================" << endl << endl;
    #endif

    int *inputVector;
    inputVector = new int [totalInputs];
    set <int> *gateVector;
    gateVector = new set <int> [5];
    set <int>::iterator itrSet, itrs;

	vector<CircuitNode> NodeList;
	map<int, CircuitNode>::iterator itrm;
	for(itrm = masterNodeList.begin(); itrm != masterNodeList.end(); itrm++)
		NodeList.push_back(itrm->second);


    // Convert the input vector string to integer
    // values to be applied to the circuit for simulation.
    // (- 48) is done to convert ascii to integer.
    for (int i = 0; i < totalInputs; i++) {
        inputVector[i] = inVector[i] - 48;
    }

    // Clear all the sets. This is important since we don't want
    // the previous values affecting current simulation.
    for (int i = 0; i < NodeList.size(); i++) {
		if(NodeList[i].gateType == G_stat0 || NodeList[i].gateType == G_stat1)
			continue;
        NodeList[i].lineValue.clear();
    }

    // Assign the vector to inputs and keep all other values empty.
    for (int i = 0, j = 0; i < NodeList.size(); i++) {
        if (NodeList[i].nodeType == 1)
            NodeList[i].lineValue.insert(inputVector[j++]);
    }


    set <int> tempSet;  // To store the result of implication.
	
	for (int i = 1; i <= outputLevel; i++)
	{
		for (int j = 0; j < NodeList.size(); j++)
		{
			if (NodeList[j].lineLevel == i)
			{
				//cout << "This node is "<<NodeList[j].lineNumber<<endl;

				int inputNumber = 0;
				// If not a primary input then generate the input set to be given to implication function.
	            for (itrSet = NodeList[j].listFanIn.begin(); itrSet != NodeList[j].listFanIn.end(); itrSet++) 
				{
					int k;
	                for (k = 0; k < NodeList.size(); k++)
	                    if (NodeList[k].lineNumber == *itrSet)
	                    {
						    gateVector[inputNumber++] = NodeList[k].lineValue;
							break;
						}
	            }
			
				switch (NodeList[j].numberFanIn) 
				{										
	                case 1:
	                    tempSet = forwardImplication (NodeList[j].gateType, gateVector[0]);
	                    break;
	                case 2:
	                    tempSet = forwardImplication (NodeList[j].gateType, gateVector[0], gateVector[1]);
	                    break;
					case 3:
						tempSet = forwardImplication (NodeList[j].gateType, gateVector[0], gateVector[1], gateVector[2]);
	                    break;
					case 4:
	                    tempSet = forwardImplication (NodeList[j].gateType, gateVector[0], gateVector[1], gateVector[2], gateVector[3]);
	                    break;
					case 5:
						tempSet = forwardImplication (NodeList[j].gateType, gateVector[0], gateVector[1], gateVector[2], gateVector[3], gateVector[4]);
	                    break;
	                default:
	                    cerr << "This ATPG generator only works if the number of inputs to a gate is less than 6." << endl;
	                    cerr << "Currently there are " << NodeList[j].numberFanIn << " inputs to the gate." << endl;
	                    exit (0);
	                    break;
            	}
				
		        // If fault can be excited, assign the value D or Dbar to the line.
		        NodeList[j].lineValue = tempSet;
			}
			
		}
			
	}

	delete inputVector, gateVector;

	masterNodeList.clear();
	for(int i = 0; i < NodeList.size(); i++)
	{
		masterNodeList.insert(pair<int, CircuitNode>(NodeList[i].lineNumber, NodeList[i]));
	}
	
	#ifdef DEBUG
        WRITE << "There are " << totalInputs << " inputs to this circuit." << endl << endl;

        for (int i = 0; i < totalInputs; i++) {
            WRITE << "Input Vector [" << i << "] is = " << inputVector[i] << endl;
        }
        WRITE << endl;

        for (int i = 0; i < NodeList.size(); i++) {
            if (NodeList[i].nodeType == 1) {
                WRITE << "The value of the input at line number " << NodeList[i].lineNumber << " is = ";
                for (itrSet = NodeList[i].lineValue.begin(); itrSet != NodeList[i].lineValue.end(); itrSet++) {
                    WRITE << *itrSet << " ";
                }
                WRITE << endl;
            }
        }
        WRITE << endl;

        for (int i = 0; i < NodeList.size(); i++) {
            if ((NodeList[i].nodeType != 1) && (NodeList[i].nodeType != 3)) {
                WRITE << "The value of the line number " << NodeList[i].lineNumber << " is = ";
                for (itrSet = NodeList[i].lineValue.begin(); itrSet != NodeList[i].lineValue.end(); itrSet++) {
                    WRITE << *itrSet << " ";
                }
                WRITE << endl;
            }
        }
        WRITE << endl;

        for (int i = 0; i < NodeList.size(); i++) {
            if (NodeList[i].nodeType == 3) {
                WRITE << "The value of the output at line number " << NodeList[i].lineNumber << " is = ";
                for (itrSet = NodeList[i].lineValue.begin(); itrSet != NodeList[i].lineValue.end(); itrSet++) {
                    WRITE << *itrSet << " ";
                }
                WRITE << endl;
            }
        }

        WRITE << endl;
    #endif


}



/* 8
 * ===  FUNCTION  ======================================================================
 *         Name:  GenerateMasterInputVectors
 *  Description:  This function takes in the number of inputs and then generates an 
 *                exhaustive list of vectors to test the circuit with. Starting with
 *                all 'X's and finishing with all known inputs.
 *
 *                These vectors are later tested with the circuit to check if a fault
 *                can be detected.
 * =====================================================================================
 */
void GenerateMasterInputVectors (vector<string> &masterInputVector, int totalInputs) {

   /* #ifdef DEBUG
        WRITE << "================================================================================" << endl;
        WRITE << "===============        In --> GenerateMasterInputVectors         ===============" << endl;
        WRITE << "================================================================================" << endl << endl;
    #endif*/

    string resultVector;                                    // Input vector.
    vector <string> *tempInputVector;                       // We have to sort vectors by number of X in them.
    tempInputVector = new vector <string> [totalInputs];
    vector <string>::iterator itrVector;

    for (int i = 0; i < (pow(3, totalInputs) - 1); i++) {   // Go on converting numbers in base 3 system.
        resultVector = RadixConvert (i, 3);
        int numberOfX = 0;                                  // Total X in the vector.
        int positionOfX = resultVector.find_first_of('2');  // Iterate over the vector.
        while (positionOfX!=string::npos)
        {
            numberOfX++;                                    // Count number of 'X's
            resultVector[positionOfX] = '4';                // Replace 2 by 4 since we are using #define X 4.
            positionOfX = resultVector.find_first_of('2',(positionOfX + 1));
        }

        tempInputVector[numberOfX].push_back(resultVector);
    }


    // Now we have to put all the vectors in a large table.
    // There are no leading zeros in the string. We need them
    // in our simulation so padding is also done.
    for (int i = 0; i < totalInputs; i++) {
        for (itrVector = tempInputVector[i].begin(); itrVector != tempInputVector[i].end(); itrVector++) {
            resultVector = *itrVector;
            int vectorLength = resultVector.length();
	        for (int j = 0; j < (totalInputs - vectorLength); j++)
		        resultVector = "0" + resultVector;
            masterInputVector.push_back (resultVector);
        }
    }


    // We start from the case with most 'X's and go to the case with minimum 'X's.
    // For this we have to reverse the vector.
    reverse (masterInputVector.begin(), masterInputVector.end());

   /* #ifdef DEBUG
    WRITE << "Total Inputs = " << totalInputs << endl;
    WRITE << "------------------------------------------------------------" << endl << endl;
    WRITE << "Vector Table for this circuit." << endl;
    WRITE << "------------------------------------------------------------" << endl << endl;
    for (itrVector = masterInputVector.begin(); itrVector != masterInputVector.end(); itrVector++) {
        WRITE << *itrVector << endl;
    }
    WRITE << "------------------------------------------------------------" << endl << endl;
    #endif*/
}

/* 9
 * ===  FUNCTION  ======================================================================
 *         Name:  CheckVectorForATPG
 *  Description:  This function takes in the line number and the fault present at that 
 *                line. It also takes in an input vector to be checked.
 *
 *                It then checks first if the fault can be excited. If the fault can be 
 *                excited then it checks whether the fault can be propagated to any one
 *                of the outputs. If both of them result in true then the fault can be
 *                tested with the vector.
 * =====================================================================================
 */
bool CheckVectorForATPG (map <int, CircuitNode> &masterNodeList, int totalInputs, int inLineNumber, bool inStuckAtValue, string inVector, int outputLevel) {

	//cout << "CheckVectorForATPG!"<<endl;

    int *inputVector;
    inputVector = new int [totalInputs];
    set <int> *gateVector;
    gateVector = new set <int> [5];
    set <int>::iterator itrSet, itrs;

	vector<CircuitNode> NodeList;
	map<int, CircuitNode>::iterator itrm;
	for(itrm = masterNodeList.begin(); itrm != masterNodeList.end(); itrm++)
		NodeList.push_back(itrm->second);


    // Convert the input vector string to integer
    // values to be applied to the circuit for simulation.
    // (- 48) is done to convert ascii to integer.
    for (int i = 0; i < totalInputs; i++) {
        inputVector[i] = inVector[i] - 48;
    }

    // Clear all the sets. This is important since we don't want
    // the previous values affecting current simulation.
	

    for (int i = 0; i < NodeList.size(); i++) 
	{
        NodeList[i].lineValue.clear();
		if(NodeList[i].gateType == 9)                  //G_stat0
			NodeList[i].lineValue.insert(0);
		else if(NodeList[i].gateType == 10)            //G_stat1
			NodeList[i].lineValue.insert(1);
    }

    // Assign the vector to inputs and keep all other values empty.
    for (int i = 0, j = 0; i < NodeList.size(); i++) {
        if (NodeList[i].nodeType == 1)
            NodeList[i].lineValue.insert(inputVector[j++]);
    }

    bool isFaultExcited = false;        // Check if the fault can be excited.
    bool isTestGenerated = false;       // Check if the test is generated.

    // For all the nodes in the circuit.
    //      -- For all the primary inputs.
    //          -- If the current line == the line where fault exists.
    //              -- If the fault can be excited.
    //                  -- Set the value to D or Dbar.
    for (int i = 0; i < NodeList.size(); i++) {
        if (NodeList[i].nodeType == 1) {
            if (inLineNumber == NodeList[i].lineNumber) {
                for (itrSet = NodeList[i].lineValue.begin(); itrSet != NodeList[i].lineValue.end(); itrSet++) {
                    if (*itrSet == 0 && inStuckAtValue == true) {
                        isFaultExcited = true;
                        NodeList[i].lineValue.clear();
                        NodeList[i].lineValue.insert(3);
                        break;
                    }
                    if (*itrSet == 1 && inStuckAtValue == false) {
                        isFaultExcited = true;
                        NodeList[i].lineValue.clear();
                        NodeList[i].lineValue.insert(2);
                        break;
                    }
                }
            }
        }
    }

    set <int> tempSet;  // To store the result of implication.
	
	for (int i = 1; i <= outputLevel; i++)
	{
		for (int j = 0; j < NodeList.size(); j++)
		{
			if (NodeList[j].lineLevel == i)
			{
				//cout << "This node is "<<NodeList[j].lineNumber<<endl;

				int inputNumber = 0;
				// If not a primary input then generate the input set to be given to implication function.
	            for (itrSet = NodeList[j].listFanIn.begin(); itrSet != NodeList[j].listFanIn.end(); itrSet++) 
				{
					int k;
	                for (k = 0; k < NodeList.size(); k++)
	                    if (NodeList[k].lineNumber == *itrSet)
	                    {
						    gateVector[inputNumber++] = NodeList[k].lineValue;
							break;
						}
	            }
			
				switch (NodeList[j].numberFanIn) 
				{										
	                case 1:
	                    tempSet = forwardImplication (NodeList[j].gateType, gateVector[0]);
	                    break;
	                case 2:
	                    tempSet = forwardImplication (NodeList[j].gateType, gateVector[0], gateVector[1]);
	                    break;
					case 3:
						tempSet = forwardImplication (NodeList[j].gateType, gateVector[0], gateVector[1], gateVector[2]);
	                    break;
					case 4:
	                    tempSet = forwardImplication (NodeList[j].gateType, gateVector[0], gateVector[1], gateVector[2], gateVector[3]);
	                    break;
					case 5:
						tempSet = forwardImplication (NodeList[j].gateType, gateVector[0], gateVector[1], gateVector[2], gateVector[3], gateVector[4]);
	                    break;
	                default:
						cout << "This node is "<<NodeList[j].lineNumber<<endl;
	                    cerr << "This ATPG generator only works if the number of inputs to a gate is less than 6." << endl;
	                    cerr << "Currently there are " << NodeList[j].numberFanIn << " inputs to the gate." << endl;
	                    exit (0);
	                    break;
            	}
				
				
				// If the current line number is the same as the line number with the fault.
		        //      -- If the fault can be excited.
		        //          -- Set proper value D or Dbar.
		        if (inLineNumber == NodeList[j].lineNumber) 
				{
		             for (itrSet = tempSet.begin(); itrSet != tempSet.end(); itrSet++) 
					 {
		                 if (*itrSet == 0 && inStuckAtValue == true) 
						 {
		                     isFaultExcited = true;
		                     tempSet.clear();
		                     tempSet.insert(3);
		                     break;
		                 }
		                 if (*itrSet == 1 && inStuckAtValue == false) 
						 {
		                     isFaultExcited = true;
		                     tempSet.clear();
		                     tempSet.insert(2);
		                     break;
		                 }
		             }
		             // If fault cannot be excited, exit.
		             if (isFaultExcited == false)
		                 return false;
		        }
		        // If fault can be excited, assign the value D or Dbar to the line.
		        NodeList[j].lineValue = tempSet;
			}
			
		}
			
	}

    // Once the simulation is done, check all the outputs.
    //      -- If any output has either a D or a Dbar then the fault is detected.
    //      -- The vector can test the fault.
    for (int i = 0; i < NodeList.size(); i++) {
        if (NodeList[i].numberFanOut == 0) {
            for (itrSet = NodeList[i].lineValue.begin(); itrSet != NodeList[i].lineValue.end(); itrSet++) {
                if (*itrSet == 2 || *itrSet == 3) {
                    isTestGenerated = true;
                }
            }
        }
    }

	delete inputVector, gateVector;

	masterNodeList.clear();
	for(int i = 0; i < NodeList.size(); i++)
		masterNodeList.insert(pair<int, CircuitNode>(NodeList[i].lineNumber, NodeList[i]));

	//cout << "CheckVecotrForATPG is done!"<<endl;

    if (isTestGenerated)
        return true;
    else
        return false;
}

/* 10
 * ===  FUNCTION  ======================================================================
 *         Name:  TestAllVectorsATPG
 *  Description:  This function reads from the vector table.
 *                It then applies each vector to CheckVectorForATPG.
 *                If a test is generated then it returns true.
 *                If no test is generated after looking at all vectors, return false.
 * =====================================================================================
 */
bool TestAllVectorsATPG (map <int, CircuitNode> &masterNodeList, int totalInputs, int inLineNumber, bool inStuckAtValue, vector <string> &inVectorList, vector <TestList> &inTestList, int outputLevel) {

    #ifdef DEBUG
        WRITE << "================================================================================" << endl;
        WRITE << "===============          In --> TestAllVectorsForATPG            ===============" << endl;
        WRITE << "================================================================================" << endl << endl;
    #endif

    string outVector;

    for (int i = 0; i < inVectorList.size(); i++) {
        outVector = inVectorList[i];
        if (CheckVectorForATPG(masterNodeList, totalInputs, inLineNumber, inStuckAtValue, outVector, outputLevel)) {
            TestList *thisTest;
            thisTest = new TestList(inLineNumber, inStuckAtValue, outVector);
            inTestList.push_back(*thisTest);
            delete thisTest;

            #ifdef DEBUG
                WRITE << endl;
                WRITE << "------------------------------------------------------------" << endl;
                WRITE << "The fault is at line number = " << inLineNumber << endl;
                WRITE << "The fault is stuck at = " << inStuckAtValue << endl;
                WRITE << "Test was generated by vector = " << outVector << endl;
                WRITE << "------------------------------------------------------------" << endl;
                WRITE << endl;
            #endif
            return true;
        }
    }
	//cout << "TestAllVectorsATPG is done!"<<endl;

    return false;

}



