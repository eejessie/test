/*
 * =====================================================================================
 *
 *       Filename:  red_forward_implication.cc
 *
 *    Description:  This function performs forward implication on a 1-3 input gate.
 *                  The inputs and output are integer sets. It reads the values from
 *                  logic tables.
 *
 *        Version:  1.0
 *        Created:  12/02/2011
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Aditya Shevade <aditya.shevade@gmail.com>,
 *                  Amey Marathe <marathe.amey@gmail.com>,
 *                  Samik Biswas <samiksb@gmail.com>,
 *                  Viraj Bhogle <viraj.bhogle@gmail.com>  
 *
 * =====================================================================================
 */

using namespace std;

// #####   HEADER FILE INCLUDES   ################################################### 

// This file contains the tables which are looked up for determinig the output.

#ifndef LOGIC_TABLES_H_
#include "../include/logic_tables.h"
#endif

// Global constant definitions.

#ifndef GLOBAL_DEFINES_H_
#include "../include/global_defines.h"
#endif

namespace nameSpace_ATPG {

/*-----------------------------------------------------------------------------
 * The function forwardImplication is overloaded. The gates in the circuits
 * we analyze can have up to 3 inputs. Depending on the number of inputs passed
 * the proper function is executed.
 *
 * Sets are used since we don't want duplicate values at the output. Set will
 * remove duplicate values.
 *
 * The best way to get the result of any logical operation is to do a table
 * lookup. The tables are defined in the logic_tables.h file included above.
 * The tables can be of any valued logic. We are currently using 5 valued
 * logic in our test generator.
 *-----------------------------------------------------------------------------*/

/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  red_forward_imlpication
 *  Description:  The function takes in an STL set as input and returns a set as output.
 *                The version defined below is a single input version.
 *                Set is used since multiple inputs may give same result.
 * =====================================================================================
 */
void red_forward_implication (vector <CircuitNode> &masterNodeList, int inLineNumber, bool inStuckAtValue) {

    set <int> *gateVector;
    gateVector = new set <int> [3];
    set <int>::iterator itrSet;
	int red_linelevel;

    // Set all the line values to X. This is important since we don't want
    // the previous values affecting current simulation.
    for (int i = 0; i < masterNodeList.size(); i++) {
        masterNodeList[i].lineValue.insert(X);
    }

    // Set the line where the fault is to the stuck-at value
    for (int i = 0; i < masterNodeList.size(); i++) {
		if (inLineNumber == masterNodeList[i].lineNumber){
			masterNodeList[i].lineValue.insert(inStuckAtValue);
			red_linelevel = masterNodeList[i].linelevel;
			break;
		}
	}

    set <int> tempSet;  // To store the result of implication.

    // Calls implication on all the nodes going from input to output.
    // Implication would result in a set of single value at the output.
    // If there is a fault (will be considered in FaultSimulation) then
    // the output set will have multiple values and/or D and/or B (Dbar).
    for (int i = 0; i < masterNodeList.size(); i++){                                  // For all nodes
        if ( masterNodeList[i].linelevel > red_linelevel) {                           // lines that are on higher levels .
            int inputNumber = 0;

            // If not a primary input then generate the input set to be given to implication function.
            for (itrSet = masterNodeList[i].listFanIn.begin(); itrSet != masterNodeList[i].listFanIn.end(); itrSet++) {
                for (int j = 0; j < masterNodeList.size(); j++) {
                    if (masterNodeList[j].lineNumber == *itrSet) {
                        gateVector[inputNumber++] = masterNodeList[j].lineValue;
                    }
                }
            }

            // Call proper implication function depending on the number of the inputs to the gate.
            // Overloaded function, please refer to logic_implication.cc for details.
            switch (masterNodeList[i].numberFanIn) {
                case 1:
                    tempSet = forwardImplication (masterNodeList[i].gateType, gateVector[0]);
                    break;
                case 2:
                    tempSet = forwardImplication (masterNodeList[i].gateType, gateVector[0], gateVector[1]);
                    break;
                case 3:
                    tempSet = forwardImplication (masterNodeList[i].gateType, gateVector[0], gateVector[1], gateVector[2]);
                    break;
                default:
                    cerr << "This ATPG generator only works if the number of inputs to a gate is less than 4." << endl;
                    cerr << "Currently there are " << masterNodeList[i].numberFanIn << " inputs to the gate." << endl;
                    exit (0);
                    break;
            }
            masterNodeList[i].lineValue = tempSet;
        }
    }


}

