#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <set>
#include <vector>
#include <map>
#include <algorithm>
#include <math.h>

#include "class/CircuitNode.h" 
#include "function/atpg.h" 
#include "lib/radix_convert.h"       

// Global constant definitions.

#ifndef GLOBAL_DEFINES_H_
#include "include/global_defines.h"
#endif

extern int PO_line;
extern vector<int> inputList;
extern vector<int> brInputList;
extern ofstream redFILE1;

using namespace std;
//using namespace nameSpace_ATPG;

void br_lisp(map<int, CircuitNode> &brNodeList, map<int, CircuitNode> &masterNodeList, vector<string> &br_lisp_log)
{
    map<int, CircuitNode>::iterator itrm, itrm0, itrm1, itrm2;
    vector<CircuitNode*>::iterator itrv, itrv0, itrv1;
    map<int, int>::iterator itrmi;

	map<int, int> rep_set;
    redFILE1 << "Compute rep_set:"<<endl;   
    cout << "Compute rep_set:"<<endl;  
    for(itrm = masterNodeList.begin(); itrm != masterNodeList.end(); itrm++)
    {
        if(itrm->second.nodeType == 2)
        {
            int node_type = itrm->second.nodeType;
            int cnode = itrm->second.lineNumber;
            while(node_type == 2)
            {
		        itrm1 = masterNodeList.find(cnode);
		        itrv1 = itrm1->second.pointFanIn.begin();
		        itrm2 = masterNodeList.find((*itrv1)->lineNumber);
		        node_type = itrm2->second.nodeType;
		        cnode = itrm2->second.lineNumber;
		    }
		    rep_set.insert(pair<int, int>(itrm->second.lineNumber, cnode));	    
        } 
    }
    
/*    redFILE1 << "Set line level: "<<endl;
    cout << "Set line level: "<<endl;
    int outputLevel = SetLineLevel(brNodeList, brInputList);
	vector<int> *levelSet;
	levelSet = new vector<int>[outputLevel];
	int level;
    for(itrm = brNodeList.begin(); itrm != brNodeList.end(); itrm++)
    {
        level = itrm->second.lineLevel;
        if(level > 0)
            levelSet[level-1].push_back(itrm->second.lineNumber);
    }*/
    
    redFILE1 << "record gates: "<<endl;
    cout << "record gates: "<<endl;
 /*   for (int i = 1; i <= outputLevel; i++)
	{
	    for(int j = 0; j < levelSet[i-1].size(); j++)
		{*/
		for(itrm = brNodeList.begin(); itrm != brNodeList.end(); itrm++)
		{		    
		 //   itrm = brNodeList.find(levelSet[i-1][j]);
		    if(itrm->second.nodeType == 1 || itrm->second.nodeType == 2)
		        continue;		    
		    int gate_type = itrm->second.gateType;
		    int node_type = itrm->second.nodeType;
		    int cnode = itrm->second.lineNumber;
		 //   redFILE1 << "current node = "<<cnode<<endl;
		    string comm;
		    switch(gate_type)
		    {
		        case 5:
		        {
		            itrv = itrm->second.pointFanIn.begin();
		            int fanin_node = (*itrv)->lineNumber;
		            itrm1 = brNodeList.find(fanin_node);
		            if(itrm1->second.nodeType == 2 || itrm->second.gateType == 11)
		            {
		                itrmi = rep_set.find(itrm1->second.lineNumber);
		                fanin_node = itrmi->second;
		            }
		    //        redFILE1 << "case5, fanin = "<<fanin_node<<endl;		
		    /*        if(node_type == 3)
		            {
		                comm = "(not n";
		                string fanin = RadixConvert(fanin_node, 10);
		                comm = comm.append(fanin);
		                comm = comm.append(") ");
		            }    
		            else */
		            {
		                comm = "(n";
		                string node = RadixConvert(cnode, 10);
		                comm = comm.append(node);
		                comm = comm.append(" (not n");
		                string fanin = RadixConvert(fanin_node, 10);
		                comm = comm.append(fanin);
		                comm = comm.append(")) ");
		            }            		            
		           //     oufile << "(n"<<cnode<<" (not n"<<fanin_node<<")) ";
		            break;
		        }
		        case 7:
		        {
		            itrv0 = itrm->second.pointFanIn.begin();
		            itrv1 = itrm->second.pointFanIn.end();
		            itrv1--;
		            int fanin0 = (*itrv0)->lineNumber;
		            int fanin1 = (*itrv1)->lineNumber;
		            itrm0 = brNodeList.find(fanin0);
		            itrm1 = brNodeList.find(fanin1);
		            if(itrm0->second.nodeType == 2 || itrm0->second.gateType == 11)
		            {
		                itrmi = rep_set.find(itrm0->second.lineNumber);
		                fanin0 = itrmi->second;
		            }	
		            if(itrm1->second.nodeType == 2 || itrm1->second.gateType == 11)
		            {
		                itrmi = rep_set.find(itrm1->second.lineNumber);
		                fanin1 = itrmi->second;
		            }
		    /*        if(node_type == 3)
		            {
		                comm = "(and n";
		                string fanin0_c = RadixConvert(fanin0, 10);
		                comm = comm.append(fanin0_c);
		                comm = comm.append(" n");
		                string fanin1_c = RadixConvert(fanin1, 10);
		                comm = comm.append(fanin1_c);
		                comm = comm.append(") ");
		            }    
		            else */
		            {
		                comm = "(n";
		                string node = RadixConvert(cnode, 10);
		                comm = comm.append(node);
		                comm = comm.append(" (and n");
		                string fanin0_c = RadixConvert(fanin0, 10);  
		                comm = comm.append(fanin0_c);
		                comm = comm.append(" n");
		                string fanin1_c = RadixConvert(fanin1, 10);
		                comm = comm.append(fanin1_c);
		                comm = comm.append(")) ");
		            }    
		            break;
		        }
		        case 3:
		        {
		            itrv0 = itrm->second.pointFanIn.begin();
		            itrv1 = itrm->second.pointFanIn.end();
		            itrv1--;
		            int fanin0 = (*itrv0)->lineNumber;
		            int fanin1 = (*itrv1)->lineNumber;
		            itrm0 = brNodeList.find(fanin0);
		            itrm1 = brNodeList.find(fanin1);
		            if(itrm0->second.nodeType == 2 || itrm0->second.gateType == 11)
		            {
		                itrmi = rep_set.find(itrm0->second.lineNumber);
		                fanin0 = itrmi->second;
		            }	
		            if(itrm1->second.nodeType == 2 || itrm1->second.gateType == 11)
		            {
		                itrmi = rep_set.find(itrm1->second.lineNumber);
		                fanin1 = itrmi->second;
		            }
		  /*          if(node_type == 3)
		            {
		                comm = "(or n";
		                string fanin0_c = RadixConvert(fanin0, 10);  
		                comm = comm.append(fanin0_c);
		                comm = comm.append(" n");
		                string fanin1_c = RadixConvert(fanin1, 10);
		                comm = comm.append(fanin1_c);
		                comm = comm.append(") ");
		            }    */
		            else 
		            {
		                comm = "(n";
		                string node = RadixConvert(cnode, 10);
		                comm = comm.append(node);
		                comm = comm.append(" (or n");
		                string fanin0_c = RadixConvert(fanin0, 10);  
		                comm = comm.append(fanin0_c);
		                comm = comm.append(" n");
		                string fanin1_c = RadixConvert(fanin1, 10);
		                comm = comm.append(fanin1_c);
		                comm = comm.append(")) ");
		            }    
		            //    oufile << "(n"<<cnode<<" (or n"<<fanin0<<" n"<<fanin1<<")) ";
		            break;
		        }
		    }//switch()	
		    
		    //if the fanout gate of current node is primary output, then print a ")"
/*		    if(itrm->second.pointFanOut.size() == 1)
		    {
		        itrv = itrm->second.pointFanOut.begin();
		        itrm1 = brNodeList.find((*itrv)->lineNumber);
		        if(itrm1->second.nodeType == 3)
		            comm = comm.append(")  ");
		    }
		    else if(itrm->second.nodeType == 3)
		        comm = comm.append(")");*/
		    
		    br_lisp_log.push_back(comm);
		    	    
		}//for()
 //   }//for()
    
       
    string comm;
    comm = ")   (not n";
    string PO_string = RadixConvert(PO_line, 10);
    comm = comm.append(PO_string);
    comm = comm.append("))");
    br_lisp_log.push_back(comm);
        
}
